Here I am  tasked with designing a system to format text in different styles for a publishing application.
The system should support multiple formatting strategies (e.g., uppercase, title case, lowercase) and allow the client to
switch between them dynamically at runtime. The formatting strategy should be applied to a given input string, and the system must be extensible to add new formatting styles later.

The goal is to use the Strategy pattern to:

Encapsulate each formatting algorithm as a separate strategy.
Allow the client to choose or change the formatting style without modifying the core logic.


Nouns
1. client
2. strategy
3. Text
4. uppercase, title case, lowercase


steps:
the main concept of SDP is Context,
A strategy interface containing the abstract method.
Then I can define multiple concreate implementing the abstract class
Lastly define a client to communicate with the context class



1. Define a context class which has
   a. The Type of strategy as an attribute
   b. An abstract class which you be implemented in the concreate classes

2. Define a class TextFormatterStrategy which has an abstract method called format_text

3. Create the concreate classes with format_text implemented
